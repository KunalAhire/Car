{"ast":null,"code":"import { APIKEY } from '../../config/API';\nimport axios from \"axios\";\n\n//get all user details\nexport const getAll = () => {\n  return fetch(`${APIKEY}user/getall`).then(response => response.json()).then(json => json).catch(err => err);\n};\n\n//To create new user\nexport const createUser = async payload => {\n  return await axios.post(`${APIKEY}user/create`, payload, {\n    headers: {\n      \"content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response).catch(err => err);\n};\n\n//get users cars\n\nexport const getAllCars = payload => {\n  return fetch(`${APIKEY}/user/get/${payload.message}`).then(response => response.json()).then(json => json).catch(err => err);\n};\n\n// create new car for user\nexport const createCar = payload => {\n  return fetch(`${APIKEY}car/create`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      model: payload.model,\n      color: payload.color,\n      ownerid: payload.currentUser,\n      purchase_date: payload.purchaseDate\n    }),\n    headers: {\n      \"Content-type\": \"application/json; charset=UTF-8\"\n    }\n  }).then(response => response.json()).then(json => json).catch(err => err);\n};\n\n// Get Service record of all cars\nexport const serviceRecords = async payload => {\n  return await fetch(`${APIKEY}/car/get/${payload}`).then(response => response.json()).then(json => json).catch(err => err);\n};\n\n// Create new service record\nexport const createService = async payload => {\n  // return fetch(`${APIKEY}/servicing/create`, {\n  // method: \"POST\", body:\n  // JSON.stringify({\n  // carid: payload.user,\n  // servicing_date: 2020/10/12,\n  // status: payload.status,\n  // }),\n  // headers: {\n  // \"Content-type\": \"application/json; charset=UTF-8\",\n  // }\n  // })\n  // .then((response) => response.json())\n  // .then((json) => json)\n  // .catch((err) => err);\n};\nconst getDate = () => {\n  let dateObj = new Date();\n  let month = String(dateObj.getMonth() + 1).padStart(2, \"0\");\n  let day = String(dateObj.getDate()).padStart(2, \"0\");\n  let year = dateObj.getFullYear();\n  return year + \"/\" + month + \"/\" + day;\n};","map":{"version":3,"names":["APIKEY","axios","getAll","fetch","then","response","json","catch","err","createUser","payload","post","headers","getAllCars","message","createCar","method","body","JSON","stringify","model","color","ownerid","currentUser","purchase_date","purchaseDate","serviceRecords","createService","getDate","dateObj","Date","month","String","getMonth","padStart","day","year","getFullYear"],"sources":["C:/Users/notme/Desktop/ReduxSaga/repo/Car/src/state/Saga/ApiCall.js"],"sourcesContent":["import { APIKEY } from '../../config/API';\r\nimport axios from \"axios\";\r\n\r\n//get all user details\r\nexport const getAll = () => {\r\n  return fetch(`${APIKEY}user/getall`)\r\n    .then((response) => response.json())\r\n    .then((json) => json)\r\n    .catch((err) => err);\r\n}\r\n\r\n//To create new user\r\nexport const createUser = async (payload) => {\r\n  return await axios.post(`${APIKEY}user/create`, payload, { headers: { \"content-type\": \"application/json; charset=UTF-8\", } })\r\n    .then((response) => response)\r\n    .catch((err) => err);\r\n}\r\n\r\n//get users cars\r\n\r\nexport const getAllCars = (payload) => {\r\n  return fetch(`${APIKEY}/user/get/${payload.message}`)\r\n    .then((response) => response.json())\r\n    .then((json) => json)\r\n    .catch((err) => err);\r\n}\r\n\r\n// create new car for user\r\nexport const createCar = (payload) => {\r\n\r\n  return fetch(`${APIKEY}car/create`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify({\r\n      model: payload.model,\r\n      color: payload.color,\r\n      ownerid: payload.currentUser,\r\n      purchase_date: payload.purchaseDate,\r\n    }),\r\n    headers: { \"Content-type\": \"application/json; charset=UTF-8\" },\r\n  })\r\n    .then((response) => response.json())\r\n    .then((json) => json)\r\n    .catch((err) => err);\r\n}\r\n\r\n// Get Service record of all cars\r\nexport const serviceRecords = async (payload) => {\r\n  return await fetch(`${APIKEY}/car/get/${payload}`)\r\n    .then((response) => response.json())\r\n    .then((json) => json)\r\n    .catch((err) => err);\r\n}\r\n\r\n// Create new service record\r\nexport const createService = async (payload) => {\r\n  // return fetch(`${APIKEY}/servicing/create`, {\r\n    // method: \"POST\", body:\r\n      // JSON.stringify({\r\n        // carid: payload.user,\r\n        // servicing_date: 2020/10/12,\r\n        // status: payload.status,\r\n      // }),\r\n    // headers: {\r\n      // \"Content-type\": \"application/json; charset=UTF-8\",\r\n    // }\r\n  // })\r\n    // .then((response) => response.json())\r\n    // .then((json) => json)\r\n    // .catch((err) => err);\r\n}\r\n\r\nconst getDate = () => {\r\n  let dateObj = new Date();\r\n  let month = String(dateObj.getMonth() + 1).padStart(2, \"0\");\r\n  let day = String(dateObj.getDate()).padStart(2, \"0\");\r\n  let year = dateObj.getFullYear();\r\n  return year + \"/\" + month + \"/\" + day;\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}